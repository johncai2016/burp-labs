For chunk header,这里通常用timeout来判断是否支持chunk这个header,比如这里是3(注意这里是16进制)，那表示在3和0\r\n\r\n之间的x=y长度就是3. 这一点可以通过选中3和0之间的部分，然后通过Inspector就可以看出来了。
3
x=y
0
所以我们来思考一个问题，那就是为啥detect里面通常要给一个不同的长度来判断，比如这个是会引起timeout的，因为如果服务器支持chunk，它就会把下面的内容当作chunk来处理，也就是它预期d到0之间应该是又
13个字符，如果服务器timeout了，说明支持chunk。否则就是不支持。所以我们可以看到http request smuggling就是利用这样的特性来检测的。
d
x=y
0


Exploiting HTTP request smuggling to capture other users' requests
这个的基本思路是：
1.针对主页来做http request smuggling,因为不管你对get/post，前后端的系统都是一样的，所以拿home page来检测
2.要capture到另外一个用户的请求，关键是要有一个页面可以反应出这些信息，不然就无法查看了，所以这里关键是找到一个可以post data，然后数据可以显示在页面上的地方。但是这里有可能要调整参数的
位置，因为用户的请求是被追加到你这个post请求，作为数据的一部分提交到系统的。假如你最后一个字段有长度限制或者其它校验，那就会导致数据提交不了，那你当然也就看不到用户的实际请求了。

Exploiting HTTP request smuggling to deliver reflected XSS
这个的基本思路是:
1. 你要找到一个reflected xss的点，这通常可以借助active scanner来完成。
2. 然后就是常规的请求走私的方法去走私这个请求就可以了。因为对于后端来说，它会收到两个请求，第一个response会返回给你发的请求。第二个response会缓存起来。所以当用户的请求到达时，这个换成的请求
会被先拿到，这样就可以达到攻击的目的了。

